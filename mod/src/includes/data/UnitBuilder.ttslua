require('!/common/Math')
require('!/common/Tablex')
require('!/Deck')

local __state = {
  faction  = nil,
  unit     = nil,
  slots    = {},
  upgrades = {},
  guids    = {
    unit        = nil,
    upgrades    = {},
    deckBuilder = nil,
  },
}

local _deck = Deck:create()
local _page = {}

function onSave()
  return JSON.encode(__state)
end

function _onLoadShared(state)
  self.interactable = false
  if state ~= "" then
    __state = JSON.decode(state)
  end
  if __state.faction then
    if __state.unit then
      _listUpgrades(__state.unit)
    else
      _addOrCopy()
    end
  end
end

function _rotateAsExpected(z)
  if z == nil then
    z = 0
  end
  local rotation = self.getRotation()
  rotation.z = z
  self.setRotation(rotation)
  if z == 0 then
    self.setColorTint({1, 1, 1})
  else
    self.setColorTint({0.137212425, 0.188192815, 0.211719871})
  end
end

function initializeWithFactionAndDeckBuilder(data)
  __state.faction = data.faction
  __state.guids.deckBuilder = data.deckBuilderGUID
  __state.guids.listBuilder = data.listBuilderGUID
  if __state.faction then
    _addOrCopy()
  end
end

function _clearUI()
  self.clearButtons()
end

function _clearUnit()
  _clearUpgrades()
  if __state.guids.unit then
    getObjectFromGUID(__state.guids.deckBuilder).call(
      "removeCommander",
      __state.unit.name:upper()
    )
    destroyObject(getObjectFromGUID(__state.guids.unit))
  end
  __state.unit = nil
  __state.slots = {}
  __state.guids.unit = nil
end

function _clearUpgrades()
  tablex.forEachObjectByGUID(__state.guids.upgrades, destroyObject)
  __state.upgrades = {}
  __state.guids.upgrades = {}
end

-- TODO: Make a better/generic version of this and put in common.
function _correctStringLength(measuredString)
  if string.len(measuredString) > 21 then
    local returnLength = 80 - ((string.len(measuredString) - 22) * 5)
    return returnLength
  else
    return 80
  end
end

function _addOrCopy()
  _clearUnit()
  _clearUpgrades()
  _clearUI()
  _rotateAsExpected(180)
  self.createButton({
    click_function = "_listRanks",
    function_owner = self,
    label          = "Add Unit",
    tooltip        = "Pick a Unit and Upgrades to Spawn",
    position       = {0, -0.2, 1},
    rotation       = {180, 0, 0},
    scale          = {0.5, 0.5, 0.5},
    width          = 5100,
    height         = 1000,
    font_size      = 350,
    color          = {0, 0, 0, 1},
    font_color     = {0.2969, 0.979, 1, 1},
  })
  self.createButton({
    click_function = "_clonePrevious",
    function_owner = self,
    label          = "Clone Previous",
    tooltip        = "Clone a previous Unit (i.e. to the \"left\")",
    position       = {0, -0.2, -0.5},
    rotation       = {180, 0, 0},
    scale          = {0.5, 0.5, 0.5},
    width          = 5100,
    height         = 1000,
    font_size      = 350,
    color          = {0, 0, 0, 1},
    font_color     = {0.2969, 0.979, 1, 1},
  })
end

function _setBackButton(label, tooltip, callback)
  _G._goBack = callback
  self.createButton({
    click_function = "_goBack",
    function_owner = self,
    label          = label,
    tooltip        = tooltip,
    position       = {2.12, 0.28, 2.13},
    rotation       = {0, 180, 0},
    width          = 270,
    height         = 190,
    font_size      = 80,
    color          = {0.1764, 0.1764, 0.1764, 0.01},
    font_color     = {0, 0, 0, 100},
  })
end

function _clonePrevious()
  local state = getObjectFromGUID(__state.guids.listBuilder).call(
    "getStateOfPrevious",
    self.getGUID()
  )
  _initializeFrom(
    state.faction,
    state.name,
    state.upgrades
  )
end

function _initializeFrom(faction, name, upgrades)
  _clearUI()
  _rotateAsExpected()
  __state.faction = faction
  __state.unit = _deck:getUnitByFactionAndName(faction, name)
  _listUpgrades(__state.unit)
  _drawUpgradeUI(upgrades)
end

function _listRanks()
  _clearUI()
  _clearUnit()
  _rotateAsExpected()
  _setBackButton("X", "Clear Unit", _addOrCopy)
  for i, rank in ipairs({
    "Commander",
    "Operative",
    "Corps",
    "Special Forces",
    "Support",
    "Heavy",
  }) do
    local callback = "_listUnits_" .. i
    _G[callback] = function()
      _listUnits(rank)
    end
    self.createButton({
      click_function = callback,
      function_owner = self,
      label          = rank,
      position       = {0.93, 0.28, 2.48 - i * 0.35},
      rotation       = {0, 180, 0},
      width          = 1010,
      height         = 190,
      font_size      = _correctStringLength(rank),
      color          = {0.1764, 0.1764, 0.1764, 0.01},
      font_color     = {0, 0, 0, 100},
      tooltip        = "Pick from " .. rank .. " units",
    })
  end
end

-- TODO: Make this more generic and host in "common".
--
-- Maybe even something like a MenuBuilder class instead?
function _paginationHelper(list, config)
  local key = config.key or ""

  -- Simple case: No pagination required.
  if not config.maxItems or config.maxItems > #list then
    for i, item in ipairs(list) do
      local callback = "subMenu" .. key .. i
      _G[callback] = function()
        config.itemPressed(item, i)
      end
      config.renderItem(item, i, callback)
      if config.autoSelect and config.autoSelect(item) then
        Wait.frames(function()
          config.itemPressed(item, i)
        end)
      end
    end
    return
  end

  -- Complex case: Pagination required.
  local startAt  = 1 + (config.currentPage - 1) * config.maxItems
  local endAt    = startAt + config.maxItems - 1
  local showNext = false
  local showPrev = false
  if startAt > 1 then
    showPrev = true
  end
  if endAt < #list then
    showNext = true
  end

  -- Create a slice of the list to represent the current page.
  -- TODO: Make this a tablex.slice function.
  local slice = {}
  for i = startAt, endAt, 1 do
    table.insert(slice, list[i])
  end
  _paginationHelper(slice, {
    key         = config.key,
    autoSelect  = config.autoSelect,
    renderItem  = config.renderItem,
    itemPressed = config.itemPressed,
  })

  -- Now (conditionally) render previous and next buttons.
  if showNext then
    local goNext = "_goNext" .. key
    _G[goNext] = function()
      config.pageChange(config.currentPage + 1)
    end
    config.renderNext(goNext)
  end
  if showPrev then
    local goPrev = "_goPrev" .. key
    _G[goPrev] = function()
      config.pageChange(config.currentPage - 1)
    end
    config.renderPrev(goPrev)
  end
end

function _listUnits(rank)
  _clearUI()
  _clearUpgrades()
  _setBackButton("X", "Go back and select a rank", _listRanks)
  _paginationHelper(_deck:getUnitsByFactionAndRank(__state.faction, rank), {
    key         = rank,
    maxItems    = 6,
    currentPage = _page.units or 1,
    renderItem  = function(item, index, callback)
      local name = item.displayName or item.name
      self.createButton({
        click_function = callback,
        function_owner = self,
        label          = name,
        tooltip        = "Pick " .. name,
        position       = {0.93, 0.28, 2.48 - index * 0.35},
        width          = 1010,
        height         = 190,
        font_size      = _correctStringLength(name),
        rotation       = {0, 180, 0},
        color          = {0.1764, 0.1764, 0.1764, 0.01},
        font_color     = {0, 0, 0, 100},
        alignment      = 3,
      })
    end,
    renderNext  = function(callback)
      self.createButton({
        click_function = callback,
        function_owner = self,
        label          = "►",
        tooltip        = "View next page of unit cards",
        position       = {-0.30, 0.28, 2.48 - 6 * 0.35},
        rotation       = {0, 180, 0},
        width          = 270,
        height         = 190,
        font_size      = 80,
        color          = {1, 0, 0},
        font_color     = {1, 1, 1},
        alignment      = 3,
      })
    end,
    renderPrev  = function(callback)
      self.createButton({
        click_function = callback,
        function_owner = self,
        label          = "◄",
        tooltip        = "View next page of unit cards",
        position       = {2.13, 0.28, 2.48 - 6 * 0.35},
        rotation       = {0, 180, 0},
        width          = 270,
        height         = 190,
        font_size      = 80,
        color          = {1, 0, 0},
        font_color     = {1, 1, 1},
      })
    end,
    pageChange  = function(newPage)
      _page.units = newPage
      _listUnits(rank)
    end,
    itemPressed = function(unitName)
      _page.units = 1
      _listUpgrades(unitName)
    end,
  })
end

function _listUpgrades(unit)
  local name = unit.name
  if unit.title then
    name = name .. " " .. unit.title
  end

  local card = _deck:spawnUnitCard(__state.faction, name)
  local position = self.getPosition()
  local rotation = self.getRotation()
  
  position = translatePos(
    position,
    rotation,
    1.5620819440734,
    52.543226290399 + 90
  )
  position.y = self.getPosition().y + 0.35

  card.interactable = false
  card.setPosition(position)
  card.setRotation({0, rotation.y + 180, 0})
  card.setScale({0.83, 1, 0.83})
  card.setVar("ptCost", unit.points or 0)
  card.createButton({
    click_function = "_listRanks",
    function_owner = self,
    label          = "X",
    tooltip        = "Remove unit",
    position       = {-0.7, 0.5, -1.4},
    width          = 140,
    height         = 180,
    font_size      = 100,
    color          = {1, 0, 0},
    font_color     = {1, 1, 1},
  })

  _clearUnit()
  __state.unit = unit
  __state.guids.unit = card.getGUID()

  if unit.rank == "Commander" or unit.rank == "Operative" then
    getObjectFromGUID(__state.guids.deckBuilder).call(
      "addCommander",
      name:upper()
    )
  end

  local slots = {}
  for name, amount in pairs(unit.upgrades) do
    for _ = 1, amount do
      table.insert(slots, name)
    end
  end
  __state.slots = slots

  _page.upgrades = {}
  _drawUpgradeUI()
end

function _drawUpgradeUI(startingUpgrades)
  _clearUI()

  -- TODO: Compute synethetic slots (additional upgrade slots granted by stuff).
  local slots = tablex.shallow(__state.slots)

  if not startingUpgrades then
    startingUpgrades = tablex.shallow(__state.unit.required or {})
  end
  if #startingUpgrades > 0 then
    _preSelectUpgrades(slots, startingUpgrades)
  end

  for i, name in ipairs(slots) do
    _drawUpgradeSlot(name, i, startingUpgrades)
  end
end

local _upgradeOffsets = {
  {
    x = -1.87,
    y = 0.28,
    z = 2.13,
  },
  {
    x = 1.87,
    y = 0.28,
    z = -0.58,
  },
  {
    x = 0,
    y = 0.28,
    z = -0.58,
  },
  {
    x = -1.87,
    y = 0.28,
    z = -0.58
  },
  {
    x = 1.87,
    y = 0.28,
    z = -3.31,
  },
  {
    x = 0,
    y = 0.28,
    z = -3.31,
  },
  {
    x = -1.87,
    y = 0.28,
    z = -3.31,
  },
}

function _correctStringLength2(input)
  local size = 160
  if string.len(input) > 12 then
    size = 160 - (string.len(input) - 12) * 7.2
  end
  if size < 70 then
    size = 70
  end
  return size
end

function _preSelectUpgrades(slots, upgrades)
  local match = {}
  for _, upgrade in ipairs(upgrades) do
    match[upgrade:upper()] = 1
  end
  for index, slot in ipairs(slots) do
    local allowed = _deck:getUpgradesByType(slot, __state.unit)
    for _, upgrade in ipairs(allowed) do
      local name = upgrade.name:upper()
      if match[name] then
        match[name] = nil
        __state.upgrades[index] = upgrade
        break
      end
    end
  end
end

function _drawUpgradeSlot(name, slotIndex)
  local upgrade = __state.upgrades[slotIndex]
  if upgrade then
    if not __state.guids.upgrades[slotIndex] then
      local isRequired = false
      for _, required in ipairs(__state.unit.required or {}) do
        if upgrade.name:upper() == required:upper() then
          isRequired = true
          break
        end
      end
      local card = _spawnUpgradeCard(
        upgrade,
        slotIndex,
        isRequired
      )
      __state.guids.upgrades[slotIndex] = card.getGUID()
    end
    return
  end

  local offsets = tablex.shallow(_upgradeOffsets[slotIndex])
  local allowed = _deck:getUpgradesByType(name, __state.unit)
  _paginationHelper(allowed, {
    key         = name .. "_" .. tostring(slotIndex) .. "_",
    maxItems    = 5,
    currentPage = _page.upgrades[slotIndex] or 1,
    renderItem  = function(item, index, callback)
      local position = tablex.shallow(offsets)
      position.z = position.z - 0.35 * (index - 1)
      self.createButton({
        click_function = callback,
        function_owner = self,
        label          = item.name,
        tooltip        = item.name,
        position       = position,
        rotation       = {0, 180, 0},
        width          = 1340,
        height         = 380,
        font_size      = _correctStringLength2(item.name),
        color          = {0.1764, 0.1764, 0.1764, 0.01},
        font_color     = {0, 0, 0, 100},
        scale          = {0.5, 0.5, 0.5},
      })
    end,
    renderPrev  = function(callback)
      local position = tablex.shallow(offsets)
      position.z = position.z - 0.35 * 5
      position.x = position.x + 0.3
      self.createButton({
        click_function = callback,
        function_owner = self,
        label          = "◄    ",
        position       = position,
        width          = 700,
        height         = 380,
        font_size      = 160,
        alignment      = 3,
        rotation       = {0, 180, 0},
        color          = {0, 0, 0, 0},
        font_color     = {0, 0, 0, 100},
        scale          = {0.5, 0.5, 0.5},
      })
    end,
    renderNext  = function(callback)
      local position = tablex.shallow(offsets)
      position.z = position.z - 0.35 * 5
      position.x = position.x - 0.3
      self.createButton({
        click_function = callback,
        function_owner = self,
        label          = "    ►",
        position       = position,
        width          = 700,
        height         = 380,
        font_size      = 160,
        alignment      = 3,
        rotation       = {0, 180, 0},
        color          = {0, 0, 0, 0},
        font_color     = {0, 0, 0, 100},
        scale          = {0.5, 0.5, 0.5},
      })
    end,
    itemPressed = function(upgrade)
      __state.upgrades[slotIndex] = upgrade
      _drawUpgradeUI()
    end,
    pageChange  = function(newPage)
      _page.upgrades[slotIndex] = newPage
      _drawUpgradeUI()
    end,
  })
end

local _upgradeCardOffsets = {
  -- q = horziontal offset?
  -- c = vertical offset?
  -- top right
  {q = 146.451578117502, c = 2.2437691503361},
  -- center left
  {q = -37.790038154384, c = 2.3663051367058},
  -- center middle
  {q = -90, c = 1.45},
  -- center right
  {q = -142.209961845616, c = 2.3663051367058},
  -- bottom left
  {q = -65.897765498839, c = 4.5792248252297},
  -- bottom middle
  {q = -90, c = 4.18},
  -- bottom right
  {q = -114, c = 4.5792248252297},
}

function _spawnUpgradeCard(upgrade, slotIndex, isRequired)
  local card = _deck:spawnUpgradeCard(upgrade.name)
  
  local position = self.getPosition()
  local rotation = self.getRotation()
  local offset = _upgradeCardOffsets[slotIndex]

  local a = offset.c * math.cos(math.rad(offset.q + rotation.y))
  local b = offset.c * math.sin(math.rad(offset.q + rotation.y))
  position.x = position.x - a
  position.z = position.z + b
  position.y = position.y + 0.35
  rotation.y = 180

  card.interactable = false
  card.setPosition(position)
  card.setRotation(rotation)
  card.setVar("ptCost", upgrade.points or 0)
  card.setScale({0.83, 0.83, 0.83})

  if not isRequired then
    local callback = "destroyUpgrade" .. slotIndex
    _G[callback] = function()
      _removeUpgrade(slotIndex)
    end
    card.createButton({
      click_function = callback,
      function_owner = self,
      label          = "X",
      position       = {-0.95, 0.5, -1.4},
      width          = 140,
      height         = 180,
      font_size      = 100,
      color          = {1, 0, 0},
      font_color     = {1, 1, 1},
      tooltip        = "Remove",
    })
  end

  return card
end

function _removeUpgrade(slotIndex)
  destroyObject(getObjectFromGUID(__state.guids.upgrades[slotIndex]))

  __state.upgrades[slotIndex] = nil
  __state.guids.upgrades[slotIndex] = nil
  _drawUpgradeUI()
end

-- TODO: Rename this to something more intelligent (it's used for JSON).
function getListText()
  if not __state.unit then
    return nil
  end
  local upgrades = {}
  tablex.forEach(__state.upgrades, function(item)
    if item ~= nil then
      table.insert(upgrades, item.name)
    end
  end)
  local name = __state.unit.name
  if __state.unit.title then
    name = name .. " " .. __state.unit.title
  end
  return {
    name     = name,
    faction  = __state.faction,
    rank     = __state.unit.rank,
    upgrades = upgrades,
  }
end
