-- Utilities around creating and managing minis.
#include !/generated/cards

Shelf = {}
Shelf.__index = Shelf;
function Shelf:create()
  local meta = {
    -- TODO: Have the schema be configurable.
    _schema = CardsSchema,
    _colliders = {
      small    = { "http://cloud-3.steamusercontent.com/ugc/1009315641457429932/1534D6C1AA4F3D5BDA469241B8F0319BE560E7ED/", 1.06299},
      medium   = { "http://cloud-3.steamusercontent.com/ugc/1009315641457670521/DAD6653F422046BD6BC4360FE18C96927D5F4C44/", 1.9685},
      large    = { "http://cloud-3.steamusercontent.com/ugc/1009315641457670155/6727179496A9F397E953AAA3268C6CC6444598DF/", 2.75591},
      huge     = { "http://cloud-3.steamusercontent.com/ugc/1009315641457669798/3B337900892D839BDBC3EBF2A5CC9EC87DDBFED1/", 3.93701},
      laat     = { "", 4.72440 },
      epic     = { "http://cloud-3.steamusercontent.com/ugc/1009315641457669292/A7F6F75580BF1DFAA23E621875A761FB8B9EF2BC/", 5.90551},
      long     = { "http://cloud-3.steamusercontent.com/ugc/963116666702885485/70F17B3327115A379D06F81C6F47F76470D7B826/", 6.88976},
    },
    _unknown   = {
      -- TODO: Add stand-ins.
    },
  }
  setmetatable(meta, Shelf)
  return meta
end

function Shelf:spawnUnitModels(faction, name, upgrades)
  -- TODO: Remove remapping.
  local remap = {
    ["rebel"]      = "Rebel",
    ["imperial"]   = "Empire",
    ["separatist"] = "Separatist",
    ["republic"]   = "Republic",
  }
  if remap[faction] ~= nil then
    faction = remap[faction]
  end
  local units = self._schema.units[faction:upper()]
  if units == nil then
    return {
      self:_spawnDudModel(name, "No matching faction found: \"" .. faction .. "\".")
    }
  end
  local card = units[name:upper()]
  if card == nil then
    return {
      self:_spawnDudModel(name, "No matching unit found.\nFaction: \"" .. faction .. "\".")
    }
  end
  local minis = card.minis
  if type(minis) == "number" then
    print("Spawning placeholder minis is not yet implemented (" .. name .. ": " .. tostring(minis) .. ")")
    return {}
  end
  local result = {}
  for _, config in pairs(minis) do
    table.insert(result, self:_spawnModel(config))
  end
  for _, upgrade in ipairs(upgrades) do
    if upgrade.mini ~= nil then
      local model = self:_spawnModel(upgrade.mini)
      if upgrade.leader == true or card.heavyWeaponTeam == true then
        table.insert(result, 1, model)
      else
        table.insert(result, model)
      end
    end
  end
  return result
end

function Shelf:_spawnDudModel(name, description)
  -- TODO: Implement.
  print("_spawnDudModel: NOT YET IMPLEMENTED")
end

function Shelf:_spawnModel(miniConfig)
  local mini
  if miniConfig.mesh == nil then
    mini = spawnObject({
      type = "Custom_AssetBundle"
    })
    mini.setCustomObject({
      assetbundle = miniConfig.bundle,
      assetbundle_secondary = miniConfig.secondary,
      type = 1,
      material = 3,
    })
  else
    mini = spawnObject({
      type = "Custom_Model"
    })
    mini.setCustomObject({
      diffuse = miniConfig.diffuse,
      mesh = mesh,
      collider = self._colliders[miniConfig.base],
      type = 1,
      material = 3,
    })
  end
  -- TODO: mini.setColorTint(gameData.getTable("battlefieldTint"))
  return mini
end
