-- Utilities around creating and managing minis.
Shelf = {}
Shelf.__index = Shelf;
function Shelf:create()
  local meta = {
    -- TODO: Have the schema be configurable.
    _colliders = {
      small    = { "http://cloud-3.steamusercontent.com/ugc/1009315641457429932/1534D6C1AA4F3D5BDA469241B8F0319BE560E7ED/", 1.06299},
      medium   = { "http://cloud-3.steamusercontent.com/ugc/1009315641457670521/DAD6653F422046BD6BC4360FE18C96927D5F4C44/", 1.9685},
      large    = { "http://cloud-3.steamusercontent.com/ugc/1009315641457670155/6727179496A9F397E953AAA3268C6CC6444598DF/", 2.75591},
      huge     = { "http://cloud-3.steamusercontent.com/ugc/1009315641457669798/3B337900892D839BDBC3EBF2A5CC9EC87DDBFED1/", 3.93701},
      laat     = { "", 4.72440 },
      epic     = { "http://cloud-3.steamusercontent.com/ugc/1009315641457669292/A7F6F75580BF1DFAA23E621875A761FB8B9EF2BC/", 5.90551},
      long     = { "http://cloud-3.steamusercontent.com/ugc/963116666702885485/70F17B3327115A379D06F81C6F47F76470D7B826/", 6.88976},
    },
    _unknown   = {
      -- TODO: Add stand-ins.
    },
  }
  setmetatable(meta, Shelf)
  return meta
end

function Shelf:_getSchema()
  return Global.getTable("CardsSchema")
end

function Shelf:spawnUnitModels(faction, name, upgrades, callback)
  -- TODO: Remove remapping.
  local remap = {
    ["rebel"]      = "Rebel",
    ["imperial"]   = "Empire",
    ["separatist"] = "Separatist",
    ["republic"]   = "Republic",
  }
  if remap[faction] ~= nil then
    faction = remap[faction]
  end
  local units = self:_getSchema().units[faction:upper()]
  if units == nil then
    local model = self:_spawnDudModel(name, "No matching faction found: \"" .. faction .. "\".")
    if callback ~= nil then
      callback(model, 1, self._colliders.small[2])
    end
    return {model}
  end
  local card = units[name:upper()]
  if card == nil then
    local model = self:_spawnDudModel(name, "No matching unit found.\nFaction: \"" .. faction .. "\".")
    if callback ~= nil then
      callback(model, 1, self._colliders.small[2])
    end
    return {model}
  end
  local size = self._colliders[card.size][2]
  local minis = card.minis
  if type(minis) == "number" then
    print("Spawning placeholder minis is not yet implemented (" .. name .. ": " .. tostring(minis) .. ")")
    return {}
  end
  local result = {}
  for _, upgradeName in ipairs(upgrades) do
    local upgrade = self:_fetchUpgradeByName(upgradeName)
    -- TODO: Handle missing upgrade more gracefully.
    if upgrade ~= nil then
      if upgrade.mini ~= nil and (upgrade.leader == true or card.heavyWeaponTeam == true) then
        local model = self:_spawnModel(card.size, upgrade.mini)
        model.setName(upgrade.name .. " (Unit Leader)")
        table.insert(result, model)
        if callback ~= nil then
          callback(model, #result, size)
        end
        break
      end
    end
  end
  for _, config in pairs(minis) do
    local model = self:_spawnModel(card.size, config)
    table.insert(result, model)
    if #result == 1 then
      model.setName(name .. " (Unit Leader)")
    else
      model.setName(name)
    end
    if callback ~= nil then
      callback(model, #result, size)
    end
  end
  for _, upgradeName in ipairs(upgrades) do
    local upgrade = self:_fetchUpgradeByName(upgradeName)
    -- TODO: Handle missing upgrade more gracefully.
    if upgrade ~= nil then
      if upgrade.mini ~= nil and upgrade.leader ~= true and card.heavyWeaponTeam ~= true then
        local model = self:_spawnModel(card.size, upgrade.mini)
        model.setName(upgrade.name)
        table.insert(result, model)
        if callback ~= nil then
          callback(model, #result, size)
        end
      end
    end
  end
  return {
    rank   = card.rank,
    speed  = card.speed,
    size   = card.size,
    models = result,
  }
end

function Shelf:_fetchUpgradeByName(name)
  -- TODO: Remove remapping.
  local remap = {
    ["C-3PO Human-Cyborg Relations"] = "C-3PO",
    ["C-3PO Made to Suffer"]         = "C-3PO",
  }
  if remap[name] ~= nil then
    name = remap[name]
  end
  return self:_getSchema().upgrades[name:upper()]
end

function Shelf:_spawnDudModel(name, description)
  local model = self:_spawnModel("small", {
    bundle = "http://cloud-3.steamusercontent.com/ugc/1616219505081638790/1BF43B61B14CFD7C588AF6C59972B092674D6C8F/",
  })
  model.setName(name)
  model.setDescription(description)
  return model
end

function Shelf:_spawnModel(size, miniConfig)
  local mini
  if miniConfig.mesh == nil then
    mini = spawnObject({
      type = "Custom_AssetBundle"
    })
    mini.setCustomObject({
      assetbundle = miniConfig.bundle,
      assetbundle_secondary = miniConfig.secondary,
      type = 1,
      material = 3,
    })
  else
    mini = spawnObject({
      type = "Custom_Model"
    })
    mini.setCustomObject({
      diffuse = miniConfig.diffuse,
      mesh = miniConfig.mesh,
      collider = self._colliders[size][1],
      type = 1,
      material = 3,
    })
  end
  return mini
end
